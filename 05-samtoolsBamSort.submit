#! /bin/bash

# Ensure we're running from the correct location
CWD_check()
{
	#local SCRIPTS_DIR
	local MAIN_DIR
	local RUN_DIR

	SCRIPTS_DIR=$(readlink -f `dirname "${BASH_SOURCE[0]}"`)
	MAIN_DIR=$(readlink -f `dirname "${SCRIPTS_DIR}/"`)
	RUN_DIR=$(readlink -f .)

	if [ "${RUN_DIR}" != "${MAIN_DIR}" ] || ! [[ "${SCRIPTS_DIR}" =~ ^"${MAIN_DIR}"/scripts.* ]]
	then
		printf "\n\t%s\n\t%s\n\n" "Script must be run from ${MAIN_DIR}" "You are currently at:   ${RUN_DIR}" 1>&2
		exit 1
	fi
}
CWD_check

rangify()
{
	local a b FIRST IFS 
	local -a RANGES
	local RANGE_END=0


	while [ $# -ge 1 ]
	do
		a=$((10#${1}))
		shift
		b=$((10#${1}))

		if [[ ${a}+1 -eq ${b} ]]
		then
			if [ ${RANGE_END} -eq 0 ]
			then
				FIRST=${a}
				RANGE_END=1
			fi
		else
			if [ ${RANGE_END} -eq 1 ]
			then
				RANGES+=(${FIRST}-${a})
			else
				RANGES+=(${a})
			fi
			RANGE_END=0
		fi

	done

	IFS=','
	echo "${RANGES[*]}"
}

submitJob()
{
	local SAM2BAM_SCRIPT SAM_FILE_PFX BAM_FILE_PFX JOB_NAME ARRAY_JOBS JOBS_AT_ONCE
	JOB_NAME="${1}"
	SAM2BAM_SCRIPT="${2}"
	SAM_FILE_PFX="${3}"
	BAM_FILE_PFX="${4}"
	ARRAY_JOBS="${5}"
	JOBS_AT_ONCE="${6}"

	sbatch \
		-J ${JOB_NAME} \
		--signal=B:USR1@300 \
		--array=${ARRAY_JOBS}%${JOBS_AT_ONCE} \
		--time=0-00:10:00 \
		--ntasks=4 \
		--nodes=1 \
		--mem=8G \
		-o job_files/%x__%A-%a.out \
		-e job_files/%x__%A-%a.err \
		${SCRIPTS_DIR}/05-samtoolsBamSort.slurm \
		"${SAM2BAM_SCRIPT}" \
		"${SAM_FILE_PFX}" \
		"${BAM_FILE_PFX}"

}

# ###################################### #
# sanity check on input and output files #
# ###################################### #

# define key variables
SAM2BAM_SCRIPT="${SCRIPTS_DIR}/sam2Bam.sh"
PROJECT="bft-mapmask"
SAM_PFX="data/alns/split-"
BAM_PFX="${SAM_PFX}"
JOBS_TO_RUN_AT_ONE_TIME=40

# create output dir (if needed)
mkdir -p $(dirname "${BAM_PFX}") &> /dev/null

# loop through input files to find output files
declare -a TO_RUN
while read SAM_FN
do
	SPLIT_NUM="${SAM_FN#*split-}"
	SPLIT_NUM="${SPLIT_NUM%.sam}"

	SAM="${SAM_PFX}${SPLIT_NUM}.sam"
	BAM="${BAM_PFX}${SPLIT_NUM}.bam"
	BAM_OK="${BAM}.ok"

	if [ ! -e "${SAM}" ]
	then
		printf "%s\n" "INFO: ${BAM} cannot be generated because ${SAM} has not yet been created. We will skip it. To proceed, first generate the .sam file." 1>&2
	fi

	if [ -e "${BAM}" ]
	then
		if [ -e "${BAM_OK}" ]
		then
			printf "%s\n\t%s\n" "INFO: ${BAM} has already finished. We will skip it. To proceed, first execute:" "rm -f ${BAM} ${BAM_OK}" 1>&2
		else
			printf "%s\n" "INFO: ${BAM} already exists, but it hadn't finished. We will delete it and try again." 1>&2
			rm -f "${BAM}" &> /dev/null
			TO_RUN+=("${SPLIT_NUM}")
		fi
	else
		TO_RUN+=("${SPLIT_NUM}")
	fi
done < <(find "data/alns" -mindepth 1 -maxdepth 1 -type f -name "`basename ${SAM_PFX}`"'*' -printf '%P\n' | sed -r 's,([0-9]+)\..+,\1,' | sort -Vu)

# skip job submission if range is empty
if [ ${#TO_RUN[@]} -eq 0 ]
then
	printf "%s\n" "No jobs to run for ${BAM_PFX}"'*.sam' 1>&2
	exit 0
fi

# create array submission ranges string
ARRAY_RANGE=`rangify "${TO_RUN[@]}"`
unset TO_RUN

# ####################### #
# actually submit the job #
# ####################### #
HPC_JOB_NAME="${PROJECT}_samtoolsSam2BamSort"
submitJob \
	"${HPC_JOB_NAME}" \
	"${SAM2BAM_SCRIPT}" \
	"${SAM_PFX}" \
	"${BAM_PFX}" \
	"${ARRAY_RANGE}" \
	"${JOBS_TO_RUN_AT_ONE_TIME}"

